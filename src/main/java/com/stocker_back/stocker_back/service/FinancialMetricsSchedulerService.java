package com.stocker_back.stocker_back.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Ïû¨Î¨¥ ÏßÄÌëú ÏûêÎèô ÏàòÏßë Ïä§ÏºÄÏ§ÑÎü¨ ÏÑúÎπÑÏä§
 * ÎØ∏Íµ≠ ÏãúÏû• Í∞úÏû• 30Î∂Ñ Ï†Ñ (9:00 AM ET)Ïóê S&P 500 Ïû¨Î¨¥ ÏßÄÌëúÎ•º ÏàòÏßëÌï©ÎãàÎã§.
 */
@Service
@Slf4j
@RequiredArgsConstructor
public class FinancialMetricsSchedulerService {

    private final FinancialMetricsService financialMetricsService;
    
    // ÎØ∏Íµ≠ ÎèôÎ∂Ä ÏãúÍ∞ÑÎåÄ
    private static final ZoneId US_EASTERN = ZoneId.of("America/New_York");
    private static final DateTimeFormatter FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss z");
    
    /**
     * ÎØ∏Íµ≠ ÏãúÏû• Í∞úÏû• 30Î∂Ñ Ï†Ñ (9:00 AM ET) ÏûêÎèô ÏàòÏßë
     * Ïõî~Í∏àÏöîÏùºÏóêÎßå Ïã§Ìñâ (ÎØ∏Íµ≠ Í±∞ÎûòÏùº)
     * 
     * Cron ÌëúÌòÑÏãù: "0 0 9 * * MON-FRI"
     * - Ï¥à: 0
     * - Î∂Ñ: 0  
     * - Ïãú: 9 (9 AM)
     * - Ïùº: * (Îß§Ïùº)
     * - Ïõî: * (Îß§Ïõî)
     * - ÏöîÏùº: MON-FRI (Ïõî~Í∏à)
     * 
     * ÏãúÍ∞ÑÎåÄ: America/New_York (EST/EDT ÏûêÎèô Ï†ÅÏö©)
     */
    @Scheduled(cron = "0 0 9 * * MON-FRI", zone = "America/New_York")
    public void scheduleDailyFinancialMetricsCollection() {
        ZonedDateTime now = ZonedDateTime.now(US_EASTERN);
        log.info("üïò Starting scheduled S&P 500 financial metrics collection at {}", 
                now.format(FORMATTER));
        
        try {
            // S&P 500 Ïû¨Î¨¥ ÏßÄÌëú ÏàòÏßë (Î∞∞Ïπò ÌÅ¨Í∏∞ 20, API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÏÑú rate limit Ï†ÅÏö©)
            int processedCount = financialMetricsService.fetchAndSaveSp500BasicFinancials(20, 0);
            
            ZonedDateTime completed = ZonedDateTime.now(US_EASTERN);
            log.info("‚úÖ Scheduled financial metrics collection completed at {}", 
                    completed.format(FORMATTER));
            log.info("üìä Summary: {} S&P 500 symbols processed", processedCount);
            
        } catch (Exception e) {
            ZonedDateTime failed = ZonedDateTime.now(US_EASTERN);
            log.error("‚ùå Scheduled financial metrics collection failed at {}: {}", 
                    failed.format(FORMATTER), e.getMessage(), e);
        }
    }
    
    /**
     * ÌÖåÏä§Ìä∏Ïö© Ïä§ÏºÄÏ§ÑÎü¨ (Îß§ 10Î∂ÑÎßàÎã§ Ïã§Ìñâ) - Ïö¥ÏòÅ ÌôòÍ≤ΩÏóêÏÑúÎäî ÎπÑÌôúÏÑ±Ìôî
     * Í∞úÎ∞ú/ÌÖåÏä§Ìä∏ ÏãúÏóêÎßå ÏÇ¨Ïö©
     */
    // @Scheduled(fixedRate = 600000) // 10Î∂Ñ = 600,000ms
    public void testScheduler() {
        ZonedDateTime now = ZonedDateTime.now(US_EASTERN);
        log.info("üß™ Test scheduler executed at {}", now.format(FORMATTER));
        log.info("üìç Next market open collection will be at 9:00 AM ET on weekdays");
    }
    
    /**
     * ÏàòÎèô Ìä∏Î¶¨Í±∞Ïö© Î©îÏÑúÎìú (Ïô∏Î∂ÄÏóêÏÑú Ìò∏Ï∂ú Í∞ÄÎä•)
     * @return Ï≤òÎ¶¨Îêú Ïã¨Î≥º Ïàò
     */
    public int triggerManualCollection() {
        ZonedDateTime now = ZonedDateTime.now(US_EASTERN);
        log.info("üîß Manual financial metrics collection triggered at {}", 
                now.format(FORMATTER));
        
        try {
            int processedCount = financialMetricsService.fetchAndSaveSp500BasicFinancials(20, 0);
            
            log.info("‚úÖ Manual financial metrics collection completed");
            log.info("üìä Summary: {} S&P 500 symbols processed", processedCount);
            
            return processedCount;
        } catch (Exception e) {
            log.error("‚ùå Manual financial metrics collection failed: {}", e.getMessage(), e);
            throw e;
        }
    }
    
    /**
     * ÌòÑÏû¨ ÎØ∏Íµ≠ ÎèôÎ∂Ä ÏãúÍ∞ÑÏùÑ Î∞òÌôòÌï©ÎãàÎã§.
     * @return ÌòÑÏû¨ ÏãúÍ∞Ñ (America/New_York ÏãúÍ∞ÑÎåÄ)
     */
    public String getCurrentEasternTime() {
        ZonedDateTime now = ZonedDateTime.now(US_EASTERN);
        return now.format(FORMATTER);
    }
    
    /**
     * Îã§Ïùå Ïä§ÏºÄÏ§Ñ Ïã§Ìñâ ÏãúÍ∞Ñ Ï†ïÎ≥¥Î•º Î∞òÌôòÌï©ÎãàÎã§.
     * @return Îã§Ïùå Ïã§Ìñâ ÏãúÍ∞Ñ Ï†ïÎ≥¥
     */
    public String getNextScheduleInfo() {
        ZonedDateTime now = ZonedDateTime.now(US_EASTERN);
        
        // Îã§Ïùå ÌèâÏùº 9:00 AM Í≥ÑÏÇ∞
        ZonedDateTime nextRun = now.withHour(9).withMinute(0).withSecond(0).withNano(0);
        
        // Ïò§ÎäòÏù¥ Ïù¥ÎØ∏ 9ÏãúÍ∞Ä ÏßÄÎÇ¨Í±∞ÎÇò Ï£ºÎßêÏù¥Î©¥ Îã§Ïùå ÌèâÏùºÎ°ú
        if (now.getHour() >= 9 || now.getDayOfWeek().getValue() >= 6) {
            do {
                nextRun = nextRun.plusDays(1);
            } while (nextRun.getDayOfWeek().getValue() >= 6); // Ï£ºÎßê Í±¥ÎÑàÎõ∞Í∏∞
        }
        
        return String.format("Next scheduled collection: %s (US Market opens 30 minutes later)", 
                nextRun.format(FORMATTER));
    }
} 